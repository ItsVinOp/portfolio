---
---

<div id="heroLogo">
    <div id="banner_logo_T"></div>
    <div id="banner_logo_R"></div>
    <div id="banner_logo_B"></div>
    <div id="banner_logo_L"></div>
</div>


<style lang="scss">
    div {
        aspect-ratio: 1/1;
        width: 200px;
        display: grid;

        z-index: 200;
        user-select: none;

        & > * {
            grid-row-start: 1;
            grid-column-start: 1;
            width: 100%;
            height: 100%;
            background: linear-gradient(67.5deg, #ea215d, #b03beb, #4d21ea);
            // transition: .5s;
            transform: rotate(22.5deg);
        }
        
        @media (max-width: 1100px)  { width: 170px; height: 170px; }
        @media (max-width: 850px)   { width: 140px; height: 140px; }
        @media (max-width: 560px)   { width: 120px; height: 120px; }
        @media (max-width: 425px)   { width: 90px; height: 90px; }

        #banner_logo_T { clip-path: polygon(29.3636% 0, 50.791% 8.7296%, 34.1252% 47.6166%, 21.4274% 19.0466%); }
        #banner_logo_R { clip-path: polygon(64.2824% 14.285%, 100% 29.3636%, 85.71% 65.076%, 50% 50%); }
        #banner_logo_B { clip-path: polygon(39.6804% 61.9068%, 79.361% 79.3662%, 71.425% 100%, 52.3782% 92.064%); }
        #banner_logo_L { clip-path: polygon(0 70.6312%, 12.6976% 39.6804%, 30.9508% 83.329%); }
    }
</style>



<script>
    import { gsap } from "gsap"

    document.addEventListener("DOMContentLoaded", () => {


        // hero logo ---------------------------
        type clipsType = { default: string, clipped:string }
        type fragmentDirType = "top" | "bottom" | "left" | "right"
        type clipPathsType = { [key in fragmentDirType]:clipsType }
        type fragmentsType = { [key in fragmentDirType]: HTMLElement }

        const clipPaths: clipPathsType = {
            top: {
                default: 'polygon(29.3636% 0, 50.791% 8.7296%, 34.1252% 47.6166%, 21.4274% 19.0466%)',
                clipped: 'polygon(29.3636% 0, 70.6312% 0, 23.8082% 20.6338%, 0 29.3636%)'
            },
            right: {
                default: 'polygon(64.2824% 14.285%, 100% 29.3636%, 85.71% 65.076%, 50% 50%)',
                clipped: 'polygon(70.6312% 0, 100% 29.3636%, 100% 70.6312%, 84.9162% 35.7124%)'
            },
            bottom: {
                default: 'polygon(39.6804% 61.9068%, 79.361% 79.3662%, 71.425% 100%, 52.3782% 92.064%)',
                clipped: 'polygon(52.3782% 90.4768%, 100% 70.6312%, 71.425% 100%, 29.3636% 100%)'
            },
            left: {
                default: 'polygon(0 70.6312%, 12.6976% 39.6804%, 30.9508% 83.329%)',
                clipped: 'polygon(0 70.6312%, 0 29.3636%, 29.3636% 100%)'
            }
        }

        const logoInitialWidth: {mediaMaxWidth:number, logoWidth:string}[] = [
            { mediaMaxWidth: 425,   logoWidth: "90px" },
            { mediaMaxWidth: 560,   logoWidth: "120px" },
            { mediaMaxWidth: 850,   logoWidth: "140px" },
            { mediaMaxWidth: 1100,  logoWidth: "170px" },
            { mediaMaxWidth: 20000, logoWidth: "200px" },
        ]

        function getInitialLogoWidth(): string {
            let finalWidth:string = logoInitialWidth[0].logoWidth
            for(let i=0; i<logoInitialWidth.length; i++) {
                const el = logoInitialWidth[i]
                if(innerWidth >= el.mediaMaxWidth)   finalWidth = el.logoWidth
                else                                break
            }
            return finalWidth
        }

        // const widths = { default:"200px", "425px":"160px", }

        const TRANSITION_BOUNDARY = 1000
        const DEFAULT_ROTATE = 22.5


        // hero banner ------------------------

        // const TRANSITION_BOUNDARY = 450
        const heroBannerFullWord = document.getElementById("heroBanner") as HTMLElement
        const heroLogoInitialWidth = getInitialLogoWidth()
        const heroBannerWidth = (heroBannerFullWord.getBoundingClientRect().width / 2) - Number(heroLogoInitialWidth.substring(0,heroLogoInitialWidth.length-2))/2 - ( innerWidth <= 425 ? 12.5 : innerWidth <= 850 ? 20 : 25)

        

        addEventListener("scroll", () => {

            // HERO BANNER MOVE RIGHT ON SCROLL DOWN --------------------------------------
            /* function handleScrollRightHeroBanner({ threshold, id, distance }: { threshold:number, id:string, distance:number }) {
                const scrollY = window.scrollY
                const targetElement = document.getElementById(id)
                const percentage = Math.min((scrollY / threshold), 1)
                const moveDistance = percentage * distance

                gsap.to(targetElement, { x: moveDistance, duration: 0.05 })
            } */
            // handleScrollRightHeroBanner({ threshold: TRANSITION_BOUNDARY - 200, distance: heroBannerWidth, id:'heroBanner' })
            // ============================================================================
            
            
            
            // HERO LOGO BLOOM OUT ON SCROLL DOWN -----------------------------------------
            /* const fragments:fragmentsType = {
                top:    document.getElementById('banner_logo_T') as HTMLElement,
                right:  document.getElementById('banner_logo_R') as HTMLElement,
                bottom: document.getElementById('banner_logo_B') as HTMLElement,
                left:   document.getElementById('banner_logo_L') as HTMLElement,
            }

            if( scrollY <= TRANSITION_BOUNDARY ) {
                Object.entries(fragments).forEach(([key, fragment]) => {
                    fragment.style.clipPath     = clipPaths[key==='top'?"top":key==='right'?"right":key==='bottom'?"bottom":"left"].default
                    fragment.style.scale        = '1'
                    fragment.style.transform    = `translate(0,0) rotate(${DEFAULT_ROTATE}deg)`
                    // fragment.style.width        = 200
                })
            } else {
                function handleFragmentAnimation({ el, moveDistance, spinDegree, clipPath, scale }:{ el:HTMLElement, moveDistance:{x:number,y:number}, spinDegree:number, clipPath:string, scale:string, width?:string }) {
                    el.style.clipPath = clipPath
                    el.style.scale = scale
                    el.style.transform    = `translate(${moveDistance.x}px, ${moveDistance.y}px) rotate(${spinDegree}deg)`
                    // el.style.width = width ? width : 200
                }
                const shardDir = (key:string): { x:number, y:number } => {
                    if(key==='top')         return { x:1, y:-1 }
                    if(key==='right')       return { x:1, y:1 }
                    if(key==='bottom')      return { x:-1, y:1 }
                    if(key==='left')        return { x:-1, y:-1 }
                    return { x:1, y:-1 }
                }
                let currScale = 1
                if(scrollY >= TRANSITION_BOUNDARY && scrollY < TRANSITION_BOUNDARY + 400 )   currScale = 2.5
                else                                                                         currScale = (scrollY * 0.012) - 13.5
                let moveDistance = Math.min(Math.max(scrollY-TRANSITION_BOUNDARY, scrollY) / 40, 88)
                let spinDegree = scrollY < 1600 ? (Math.min((Math.max(scrollY-TRANSITION_BOUNDARY, scrollY)/10)*(scrollY<TRANSITION_BOUNDARY+400?0.5:scrollY<TRANSITION_BOUNDARY+1200?0.5+((scrollY-1400)*0.0005):1), 360)) : (Math.min((Math.max(scrollY-TRANSITION_BOUNDARY, scrollY)/14), 360)) + DEFAULT_ROTATE
                Object.entries(fragments).forEach(([key, fragment]) => handleFragmentAnimation({ el:fragment, moveDistance:{x:moveDistance*shardDir(key).x, y:moveDistance*shardDir(key).y}, spinDegree:spinDegree, clipPath:clipPaths[key==='top'?"top":key==='right'?"right":key==='bottom'?"bottom":"left"].clipped, scale:String(currScale) }))
                console.table({moveDist:moveDistance,scrollY:scrollY})
            } */
            // ============================================================================

        })  



    })

</script>