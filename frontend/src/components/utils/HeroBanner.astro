---
import HeroLogo from "./HeroLogo.astro"

const titleName = 'Kushal'
---

<section id="heroBanner">
    <HeroLogo />
    <div id="hero-name-wrapper">
        {titleName.split("").map((item) => (
            <span class="hero-title">{item}</span>
        ))}
    </div>
</section>


<style lang="scss">
    section {
        display: flex;
        align-items: center;
        justify-content: center;
        width: fit-content;
        padding: 0;
        font-size: 180px;
        background: linear-gradient(67.5deg, #ea215d, #b03beb, #4d21ea);
        // transition: .75s;
        
        color: transparent;
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;

        @media (max-width: 1100px) {
            font-size: 150px;
        }
        @media (max-width: 850px) {
            font-size: 120px;
        }
        @media (max-width: 560px) {
            font-size: 100px;
        }
        @media (max-width:425px) {
            font-size: 70px;
        }

        div .hero-title {
            padding: 0;
            letter-spacing: -12px;
            
            @media (max-width: 850px) {
                letter-spacing: -7px;
            }
            @media (max-width: 425px) {
                letter-spacing: -4px;
            }

            &:nth-child(1) {
                margin-left: 24px;
                
                @media (max-width: 560px) {
                    margin-left: 12px;
                }
            }
        }
    }
</style>

<script>
    import { gsap } from 'gsap' 
    import { ScrollTrigger } from 'gsap/ScrollTrigger'
    import { MotionPathPlugin } from 'gsap/MotionPathPlugin'
    gsap.registerPlugin(ScrollTrigger, MotionPathPlugin)
    
    type FragmentDirType= "top" | "bottom" | "left" | "right"
    type ClipsType      = { default: string, clipped:string }
    type ClipPathsType  = { [key in FragmentDirType]: ClipsType }
    type FragmentsType  = { [key in FragmentDirType]: HTMLElement }

    const viewportDiagonalLength = Math.sqrt(innerHeight*innerHeight + innerWidth*innerWidth)
    const getHeroBannerTranslateOffset = (len:number, offset:number) => { return ((len - offset - (innerWidth < 640 ? 0 : 110)) / 2) }
    const shardDir = (key:string): { x:number, y:number } => {
        if(key==='top')         return { x:1, y:-1 }
        if(key==='right')       return { x:1, y:1 }
        if(key==='bottom')      return { x:-1, y:1 }
        if(key==='left')        return { x:-1, y:-1 }
        return { x:1, y:-1 }
    }
    const generateSpiralPath = (direction:FragmentDirType) => {
        const eqn = (t:number) => (Math.pow(t,1.5))
        const path = []
        const a = 1, SCALE = 2
        for (let t = 0; t <= viewportDiagonalLength/48; t += 0.1) {
            let x: number = 0, y: number = 0;
            if (direction === 'top') {
                x = 0
                y = -1 * eqn(t) * (1 + (t/320))
            } else if (direction === 'right') {
                x = eqn(t) * (1 + (t/320))
                y = 0
            } else if (direction === 'bottom') {
                x = 0
                y = 1 * eqn(t) * (1 + (t/320))
            } else if (direction === 'left') {
                x = -1 * eqn(t) * (1 + (t/320))
                y = 0
            }
            path.push({ x: x * SCALE, y: y * SCALE }); 
        }
        return path
    }

    const CONSTANTS: { [key:string]: any } = {
        HERO: {
            MOVE_RIGHT: {
                totalVerticalScrollDistance: 500,
                fadeEndOffset: 100
            },
            BLOOM_EFFECT: {
                totalVerticalScrollDistance: 4200,
                totalStallingDistance: 610,    // 500: MOVE_RIGHT.totalVerticalScrollDistance
            }
        }
    }

    const HERO_BANNER = '#heroBanner'
    const HERO_BANNER_LOGO = '#heroLogo'
    const HERO_BANNER_PARENT = '#hero'
    const HERO_BANNER_LETTERS = '.hero-title'
    const HERO_BANNER_LETTER_WRAPPER = '#hero-name-wrapper'
    const HERO_LOGO_FRAGMENT = { top: '#banner_logo_T', right: '#banner_logo_R', bottom: '#banner_logo_B', left: '#banner_logo_L' } 
    const HERO_LOGO_FRAGMENTS:FragmentsType = {
        top:    document.getElementById(HERO_LOGO_FRAGMENT.top.substring(1)) as HTMLElement,
        right:  document.getElementById(HERO_LOGO_FRAGMENT.right.substring(1)) as HTMLElement,
        bottom: document.getElementById(HERO_LOGO_FRAGMENT.bottom.substring(1)) as HTMLElement,
        left:   document.getElementById(HERO_LOGO_FRAGMENT.left.substring(1)) as HTMLElement,
    }
    const HERO_FRAGMENT_SHIFT_DIST: { [key in FragmentDirType]: string } = {
        top:    "-40px 0 0 0",
        right:  "0 -40px 0 0",
        bottom: "0 0 -40px 0",
        left:   "0 0 0 -40px"
    }
    const CLIP_PATHS: ClipPathsType = {
        top: {
            default: 'polygon(29.3636% 0, 50.791% 8.7296%, 34.1252% 47.6166%, 21.4274% 19.0466%)',
            clipped: 'polygon(29.3636% 0, 70.6312% 0, 23.8082% 20.6338%, 0 29.3636%)'
        },
        right: {
            default: 'polygon(64.2824% 14.285%, 100% 29.3636%, 85.71% 65.076%, 50% 50%)',
            clipped: 'polygon(70.6312% 0, 100% 29.3636%, 100% 70.6312%, 84.9162% 35.7124%)'
        },
        bottom: {
            default: 'polygon(39.6804% 61.9068%, 79.361% 79.3662%, 71.425% 100%, 52.3782% 92.064%)',
            clipped: 'polygon(52.3782% 90.4768%, 100% 70.6312%, 71.425% 100%, 29.3636% 100%)'
        },
        left: {
            default: 'polygon(0 70.6312%, 12.6976% 39.6804%, 30.9508% 83.329%)',
            clipped: 'polygon(0 70.6312%, 0 29.3636%, 29.3636% 100%)'
        }
    }

    const HERO_BANNER_FULL_WIDTH    = (document.querySelector(HERO_BANNER) as HTMLElement).getBoundingClientRect().width
    const HERO_LOGO_FULL_WIDTH      = (document.querySelector(HERO_BANNER_LOGO) as HTMLElement).getBoundingClientRect().width
    const HERO_NAME_LETTERS         = document.querySelectorAll(HERO_BANNER_LETTERS)



    // move hero banner to right on-scroll...
    const heroTL = gsap.timeline({
        scrollTrigger: {
            trigger: HERO_BANNER_PARENT,
            start: "top 0%",
            end: `+=${CONSTANTS.HERO.MOVE_RIGHT.totalVerticalScrollDistance + CONSTANTS.HERO.BLOOM_EFFECT.totalVerticalScrollDistance}`,
            scrub: 0.5,
            markers: true,
            pin: true
        }
    })
    
    const heroBannerMoveX = getHeroBannerTranslateOffset( HERO_BANNER_FULL_WIDTH, HERO_LOGO_FULL_WIDTH )
    heroTL.to(HERO_BANNER, {
        x: heroBannerMoveX,
        ease: "power2.out",
        duration: 5
    }, 0)

    heroTL.to(HERO_BANNER_LOGO, {
        rotation: -300,
        duration: 20,
    }, 3)

    // bloom out effect to logo fragments...
    const directions: FragmentDirType[] = [ "top" ,"right", "bottom", "left" ]
    directions.forEach((direction,index) => {
        const selector = HERO_LOGO_FRAGMENT[direction]
        console.log(generateSpiralPath(direction))
        heroTL.to(selector, {
            motionPath: {
                path: generateSpiralPath(direction),
                autoRotate: false,
            },
            scale: 20,
            duration: 20
        }, 3)
    })



    // SCROLL EVENT HANDLER ==================================== ...
    const heroNameWrapper = (document.querySelector(HERO_BANNER_LETTER_WRAPPER) as HTMLElement)
    const fadingTrack = CONSTANTS.HERO.MOVE_RIGHT.totalVerticalScrollDistance - CONSTANTS.HERO.MOVE_RIGHT.fadeEndOffset
    addEventListener("scroll", () => {
        
        // fade out each name elements as scroll happens...
        let fadePercentage: string | number = 1
        if(scrollY <= fadingTrack) 
            fadePercentage = String(scrollY / fadingTrack);   
        heroNameWrapper.animate({
            background: `rgba(18,18,18,${fadePercentage})`
        }, { duration:750, fill:"forwards" })


        // logo fragments switch shape...
        const isDistClippable = scrollY >= CONSTANTS.HERO.BLOOM_EFFECT.totalStallingDistance
        Object.entries(HERO_LOGO_FRAGMENTS).forEach(([key, fragment]) => {
            fragment.animate({
                // margin: !isDistClippable? "0" : HERO_FRAGMENT_SHIFT_DIST[key==='top'?"top":key==='right'?"right":key==='bottom'?"bottom":"left"],
                clipPath: CLIP_PATHS[key==='top'?"top":key==='right'?"right":key==='bottom'?"bottom":"left"][isDistClippable?"clipped":"default"]
            }, { duration: 200, fill:"forwards" })
        })
    })
     

</script>